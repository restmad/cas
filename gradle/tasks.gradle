import org.gradle.internal.logging.LoggingOutputInternal
import org.gradle.internal.logging.events.OutputEvent
import org.gradle.internal.logging.events.OutputEventListener

tasks.withType(Javadoc) {
    def exceptions = []
    doFirst {
        gradle.services.get(LoggingOutputInternal).addOutputEventListener(new OutputEventListener() {
            void onOutput(OutputEvent event) {
                if (event.toString() =~ " warning: ") {
                    exceptions << new GradleException("Javadoc warning: ${event.toString()}")
                }
            }
        })
    }
    doLast {
        exceptions.each {
            throw it
        }
    }
}

task pathingJar(type: Jar, description: "Produces a 'pathing' JAR whose manifest class-path contains project runtime dependencies") {
    dependsOn configurations.runtimeClasspath
    appendix = "pathing"

    doFirst {
        manifest {
            attributes "Class-Path":
            configurations.runtimeClasspath.files.collect {
                it.toURL().toString().replaceFirst("/file:/+/", "/")
            }
            .join(" ")
        }
    }
}

task testJar(type: Jar, dependsOn: testClasses, description: "archive the testClasses") {
    baseName = "${project.archivesBaseName}-tests"
    classifier = "tests"
    from sourceSets.test.output
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

task resourcesJar(type: Jar) {
    classifier "resources"
    from project.file("src/main/resources")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

task cleanLogs(description: "Clean build log files") {
    delete fileTree(dir: project.projectDir, includes: ["**/*.log", "**/*.gz", "**/*.log.gz", "**/*.orig"])
}

task showConfiguration {
    description "Shows the configuration used by the build"
    doLast() {
        def cfg = project.hasProperty("configuration") ? project.property("configuration") : "compile"
        configurations.getByName(cfg).each { println it }
    }
}

task downloadDependencies {
    description "Pre-download project dependencies for all configurations"
    doLast {
        configurations.getAsMap().each { name, config ->
            logger.info "Retrieving dependencies for $project:$name"
            try {
                config.files
            } catch (e) {
                project.logger.info e.message
            }
        }
    }
}

task verifySpringConfigurationFactories(description: "Examine spring.factories file and ensure @Configuration classes can be located") {
    doLast {
        def springFactoriesFile = new File(project.projectDir, "src/main/resources/META-INF/spring.factories")
        if (springFactoriesFile.exists()) {
            def properties = new Properties()
            properties.load(new FileReader(springFactoriesFile))

            if (properties.containsKey("org.springframework.cloud.bootstrap.BootstrapConfiguration")) {
                def classes = properties.get("org.springframework.cloud.bootstrap.BootstrapConfiguration")
                checkForSpringConfigurationFactories(project.projectDir.getCanonicalPath(), classes)
            }
            if (properties.containsKey("org.springframework.boot.autoconfigure.EnableAutoConfiguration")) {
                def classes = properties.get("org.springframework.boot.autoconfigure.EnableAutoConfiguration")
                checkForSpringConfigurationFactories(project.projectDir.getCanonicalPath(), classes)
            }
        }
    }
}

task validateTestsSuites(description: "Ensure all projects contain a tests suite that contains test classes") {
    doLast {
        def testSources = new File(project.getProjectDir(), "src/test/java")
        if (testSources.exists()) {
            def testSuites = new FileNameByRegexFinder().getFileNames(testSources.canonicalPath, /.*TestsSuite\.java/)
            def testClasses = new FileNameByRegexFinder().getFileNames(testSources.canonicalPath, /.*Tests\.java/, /.*(Base|Abstract).+Tests\.java/)

            if (testClasses.size() > 1 && testSuites.isEmpty()) {
                throw new GradleException("Project ${project.displayName} is missing a TestsSuite class, while it contains ${testClasses.size()} tests")
            }

            if (testSuites.size() > 1) {
                throw new GradleException("Project ${project.displayName} has more than one TestsSuite")
            }

            if (!testSuites.isEmpty()) {
                def testSuiteFile = new File(testSuites.get(0))
                def testSuiteFileBody = testSuiteFile.text
                def missingClasses = testClasses.findAll({
                    def testClass = new File(it).name.replace(".java", ".class")
                    !testSuiteFileBody.contains(testClass)
                })
                if (!missingClasses.isEmpty()) {
                    println "${testSuiteFile.name} of ${project.displayName} does not include:"
                    println missingClasses
                            .sort()
                            .collect({ new File(it).name.replace(".java", ".class") })
                            .join(", ")

                    throw new GradleException("Found ${missingClasses.size()} missing test class(es) in test suites")
                }
            } 
        }
    }
}



def checkForSpringConfigurationFactories(String projectPath, String configurations) {
    def classes = configurations.split(",")
    classes.each {
        def sourcePath = "/src/main/java/".replace("/", String.valueOf(File.separator))
        def clazz = projectPath + sourcePath + it.replace(".", String.valueOf(File.separator)) + ".java"
        def configurationFile = new File(clazz)
        if (!configurationFile.exists()) {
            throw new GradleException("Spring configuration class does not exist: ${clazz}")
        }
    }
}

gradle.buildFinished { buildResult ->
    cleanLogs
}


clean.dependsOn("cleanLogs")
